{
  "laravel get 路由模板": {
    "prefix": "roug",
    "body": ["Route::get('/$1',function (){", "\t$2", "});"],
    "description": "php模板" // 模板的描述
  },
  "返回 return": {
    "prefix": "return",
    "body": ["return $0;"],
    "description": "php模板" // 模板的描述
  },
  "dd断定输出": {
    "prefix": "dd",
    "body": ["dd(\\$$0);"],
    "description": "php模板" // 模板的描述
  },
  "tp6 返回异常格式": {
    "prefix": "ehandle",
    "body": [
      "// 参数验证错误",
      "if (\\$e instanceof ValidateException) {",
      "\\$data['code'] = 400;",
      "\\$data['msg']  = \\$e->getError();",
      "\\$data['err']  = [];",
      "return response(\\$data, 200, [], 'json');",
      "}",
      "",
      "// 请求异常",
      "if (\\$e instanceof HttpException && \\$request->isAjax()) {",
      "return response(\\$e->getMessage(), \\$e->getStatusCode(), [], 'json');",
      "}",
      "",
      "// 手动异常",
      "\\$debug = Env::get('app_debug');",
      "if (\\$debug) {",
      "\\$err['file']  = \\$e->getFile();",
      "\\$err['line']  = \\$e->getLine();",
      "\\$err['trace'] = \\$e->getTrace();",
      "",
      "\\$data['code'] = \\$e->getCode();",
      "\\$data['msg']  = \\$e->getMessage();",
      "\\$data['err']  = \\$err;",
      "} else {",
      "\\$data['code'] = \\$e->getCode();",
      "\\$data['msg']  = '服务器错误';",
      "\\$data['err']  = ['desc' => \\$e->getMessage()];",
      "",
      "if (\\$data['code'] >= 400 && \\$data['code'] < 500) {",
      "\\$data['msg']  = \\$e->getMessage();",
      "} else {",
      "\\$data['code'] = \\$e->getCode();",
      "}",
      "}",
      "return response(\\$data, 200, [], 'json');"
    ],
    "description": "php模板" // 模板的描述
  },
  "前端字段有效性验证": {
    "prefix": "validate",
    "body": ["validate($1Validate::class)->scene('$2')->check(\\$param);"],
    "description": "php模板" // 模板的描述
  },
  "数据库删除delete": {
    "prefix": "del",
    "body": ["\\$res = Db::name('$1')->where('$2',$3)->delete();"],
    "description": "php模板" // 模板的描述
  },
  "数据库更新update": {
    "prefix": "upd",
    "body": ["\\$res = Db::name('$1')->where('$2',$3)->update($4);"],
    "description": "php模板" // 模板的描述
  },
  "数据库添加add": {
    "prefix": "add",
    "body": ["\\$res = Db::name('$1')->insertGetId($2);"],
    "description": "php模板" // 模板的描述
  },
  "数据库查询select": {
    "prefix": "sele",
    "body": [
      "\\$res = Db::name('$1')->field('$2')->where($3)->select()->toArray();"
    ],
    "description": "php模板" // 模板的描述
  },
  "数据库查询find": {
    "prefix": "find",
    "body": ["\\$res = Db::name('$1')->field('$2')->where($3)->find();"],
    "description": "php模板" // 模板的描述
  },
  "数据库查询count": {
    "prefix": "count",
    "body": ["\\$count = Db::name('$1')->where($2)->count('$3');"],
    "description": "php模板" // 模板的描述
  },
  "数据库查询list": {
    "prefix": "list",
    "body": [
      "\\$list = Db::name('$1')->field($2)->where($3)->page($4)->limit($5)->order($6)->select()->toArray();"
    ],
    "description": "php模板" // 模板的描述
  },
  "数组内部模板02 $[] = ['','',];": {
    "prefix": "ar",
    "body": ["\\$$1[] = ['$2','$3',$4];"],
    "description": "php模板" // 模板的描述
  },
  "数组内部模板01 $[''] = ;": {
    "prefix": "ar",
    "body": ["\\$$1['$2'] = $3;"],
    "description": "php模板" // 模板的描述
  },
  "三元运算符 $ =  ?  :  ;": {
    "prefix": "if?",
    "body": ["\\$$1 = $2 ? $3 : $4 ;"],
    "description": "php模板" // 模板的描述
  },
  "数组内部模板03 ''  => '',": {
    "prefix": "ar",
    "body": ["'$1'  => '$2',"],
    "description": "php模板" // 模板的描述
  },
  "数组内部模板04 '' => ['',''],": {
    "prefix": "ar",
    "body": ["'$1' => ['$2','$3'],"],
    "description": "php模板" // 模板的描述
  },
  "ifelseif条件语句": {
    "prefix": "ifel",
    "body": ["if ($1) {", "\t$2", "} elseif($1) {", "\t", "}"],
    "description": "php模板" // 模板的描述
  },
  "接收前端字段模板01 $param[''] = Request::param('/s','');": {
    "prefix": "pa",
    "body": ["\\$param['$1'] = Request::param('$1/s$2','$3');"],
    "description": "php模板" // 模板的描述
  },
  "接收前端字段模板02 $ = Request::param('/s','');": {
    "prefix": "pa",
    "body": ["\\$$1 = Request::param('$1/s$2','$3');"],
    "description": "php模板" // 模板的描述
  },
  "switch条件语句": {
    "prefix": "sw",
    "body": [
      "switch ($0) {",
      "\tcase '':",
      "\t\t",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\t",
      "\t\tbreak;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "if条件语句": {
    "prefix": "if",
    "body": ["if ($0) {", "\t", "}"],
    "description": "php模板" // 模板的描述
  },
  "ifelse条件语句": {
    "prefix": "ife",
    "body": ["if ($0) {", "\t", "} else {", "\t", "}"],
    "description": "php模板" // 模板的描述
  },
  "类": {
    "prefix": "cl",
    "body": ["class ", "{", "", "}"],
    "description": "php模板" // 模板的描述
  },
  "方法模板": {
    "prefix": "me",
    "body": ["public function $1($2)", "{", "\t$3", "}"],
    "description": "php模板" // 模板的描述
  },
  "控制器方法增删改查": {
    "prefix": "co",
    "body": [
      "\t/**",
      "\t* 会员列表",
      "\t*",
      "\t* @method GET",
      "\t* ",
      "\t* @return json",
      "\t*/",
      "\tpublic function memberList()",
      "\t{",
      "\t\t$0",
      "\t}",
      "\t",
      "\t/**",
      "\t* 会员添加",
      "\t*",
      "\t* @method GET|POST",
      "\t*",
      "\t* @return json",
      "\t*/",
      "\tpublic function memberAdd()",
      "\t{",
      "\t\t",
      "\t}",
      "\t",
      "\t/**",
      "\t* 会员修改",
      "\t*",
      "\t* @method GET|POST",
      "\t* ",
      "\t* @return json",
      "\t*/",
      "\t",
      "\tpublic function memberEdit()",
      "\t{",
      "\t\t",
      "\t}",
      "\t",
      "\t/**",
      "\t* 会员删除",
      "\t*",
      "\t* @method POST",
      "\t*",
      "\t* @return json",
      "\t*/",
      "\tpublic function memberDele()",
      "\t{",
      "\t\t",
      "\t}"
    ],
    "description": "php模板" // 模板的描述",
  },
  "服务层方法增删改查": {
    "prefix": "se",
    "body": [
      "\t/**",
      "\t* 会员列表",
      "\t*",
      "\t* @param array   \\$where   条件",
      "\t* @param integer \\$page    页数",
      "\t* @param integer \\$limit   数量",
      "\t* @param array   \\$order   排序",
      "\t* @param string  \\$field   字段",
      "\t* ",
      "\t* @return array ",
      "\t*/",
      "\tpublic static function list(\\$where = [], \\$page = 1, \\$limit = 10, \\$order = [], \\$field = '')",
      "\t{",
      "\t\t$0",
      "\t}",
      "\t",
      "\t/**",
      "\t* 会员添加",
      "\t*",
      "\t* @param array \\$param 会员信息",
      "\t* ",
      "\t* @return array",
      "\t*/",
      "\tpublic static function add(\\$param = [], \\$method = 'get')",
      "\t{",
      "\t\t",
      "\t}",
      "\t",
      "\t/**",
      "\t* 会员修改",
      "\t*",
      "\t* @param array \\$param 会员信息",
      "\t*",
      "\t* @return array",
      "\t*/",
      "\tpublic static function edit(\\$param, \\$method = 'get')",
      "\t{",
      "\t\t",
      "\t}",
      "\t",
      "\t/**",
      "\t* 会员删除",
      "\t*",
      "\t* @param integer \\$member_id 会员id",
      "\t* ",
      "\t* @return array",
      "\t*/",
      "\tpublic static function dele(\\$member_id)",
      "\t{",
      "\t\t",
      "\t}"
    ],
    "description": "php模板" // 模板的描述
  },
  "缓存层key 设置 获取 删除": {
    "prefix": "ca",
    "body": [
      "/**",
      "* 缓存key",
      "*",
      "* @param integer \\$member_id 会员id",
      "* ",
      "* @return string",
      "*/",
      "public static function key(\\$member_id)",
      "{",
      "\t\\$key = 'member:' . \\$member_id;",
      "",
      "\treturn \\$key;",
      "}",
      "",
      "/**",
      "* 缓存设置",
      "*",
      "* @param integer \\$member_id 会员id",
      "* @param array   \\$member    会员信息",
      "* @param integer \\$expire    有效时间（秒）",
      "* ",
      "* @return bool",
      "*/",
      "public static function set(\\$member_id, \\$member, \\$expire = 0)",
      "{",
      "\t\\$key = self::key(\\$member_id);",
      "\t\\$val = \\$member;",
      "\t\\$ttl = 7 * 24 * 60 * 60;",
      "\t\\$exp = \\$expire ?: \\$ttl;",
      "",
      "\t\\$res = Cache::set(\\$key, \\$val, \\$exp);",
      "",
      "\treturn \\$res;",
      " }",
      "",
      "/**",
      "* 缓存获取",
      "*",
      "* @param integer \\$member_id 会员id",
      "* ",
      "* @return array 会员信息",
      "*/",
      "public static function get(\\$member_id)",
      "{",
      "\t\\$key = self::key(\\$member_id);",
      "\t\\$res = Cache::get(\\$key);",
      "",
      "\treturn \\$res;",
      "}",
      "",
      "/**",
      "* 缓存删除",
      "*",
      "* @param integer \\$member_id 会员id",
      "* ",
      "* @return bool",
      "*/",
      "public static function del(\\$member_id)",
      "{",
      "\t\\$key = self::key(\\$member_id);",
      "\t\\$res = Cache::delete(\\$key);",
      "",
      "\treturn \\$res;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "Admin 日志中间件": {
    "prefix": "mi",
    "body": [
      "\\$response = \\$next(\\$request);",
      "// 是否存入日志",
      "\\$is_log = Config::get('admin.is_log', false);",
      "",
      "if (\\$is_log) {",
      "\\$admin_user_id = admin_user_id();",
      "",
      "if (\\$admin_user_id) {",
      "\\$menu_url   = request_pathinfo();",
      "\\$admin_menu = AdminMenuService::info(\\$menu_url);",
      "",
      "\\$admin_log['admin_user_id']  = \\$admin_user_id;",
      "\\$admin_log['admin_menu_id']  = \\$admin_menu['admin_menu_id'];",
      "\\$admin_log['request_method'] = \\$request->method();",
      "\\$admin_log['request_ip']     = \\$request->ip();",
      "\\$admin_log['request_param']  = serialize(\\$request->param());",
      "AdminLogService::add(\\$admin_log);",
      "}",
      "}",
      "",
      "return \\$response;"
    ],
    "description": "php模板" // 模板的描述
  },
  "Admin 权限验证中间件": {
    "prefix": "mi",
    "body": [
      "\\$menu_url        = request_pathinfo();",
      "\\$api_white_list  = Config::get('admin.api_white_list');",
      "\\$rule_white_list = Config::get('admin.rule_white_list');",
      "\\$white_list      = array_merge(\\$rule_white_list, \\$api_white_list);",
      "",
      "if (!in_array(\\$menu_url, \\$white_list)) {",
      "\\$admin_user_id = admin_user_id();",
      "\\$admin_ids     = Config::get('admin.admin_ids');",
      "if (!in_array(\\$admin_user_id, \\$admin_ids)) {",
      "\\$admin_user = AdminUserCache::get(\\$admin_user_id);",
      "",
      "if (empty(\\$admin_user)) {",
      "exception('登录已失效，请重新登录', 401);",
      "}",
      "",
      "if (\\$admin_user['is_disable'] == 1) {",
      "exception('账号已禁用，请联系管理员', 401);",
      "}",
      "",
      "if (!in_array(\\$menu_url, \\$admin_user['roles'])) {",
      "\\$admin_menu = AdminMenuService::info(\\$menu_url);",
      "exception('你没有权限操作：' . \\$admin_menu['menu_name'], 403);",
      "}",
      "}",
      "",
      "\\$admin_menu_url = AdminMenuService::list('url')['list'];",
      "",
      "if (!in_array(\\$menu_url, \\$admin_menu_url)) {",
      "\\$msg   = '接口地址错误';",
      "\\$debug = Env::get('app_debug');",
      "if (\\$debug) {",
      "\\$msg .= '：' . \\$menu_url;",
      "}",
      "exception(\\$msg, 404);",
      "}",
      "}",
      "",
      "return \\$next(\\$request);"
    ],
    "description": "php模板" // 模板的描述
  },
  "Admin 请求频率限制中间件": {
    "prefix": "mi",
    "body": [
      "// 在1秒时间内对一个key值进行单增1 如果超过指定的次数 返回错误  超过1秒缓存消失 这时再给缓存设置值",
      "\\$throttle = Config::get('admin.throttle');",
      "\\$number   = \\$throttle['number'];",
      "\\$expire   = \\$throttle['expire'];",
      "if (\\$number > 0 && \\$expire > 0) {",
      "\\$admin_user_id = admin_user_id();",
      "\\$menu_url      = request_pathinfo();",
      "",
      "if (\\$admin_user_id && \\$menu_url) {",
      "\\$count = AdminThrottleCache::get(\\$admin_user_id, \\$menu_url);",
      "if (\\$count) {",
      "if (\\$count >= \\$number) {",
      "AdminThrottleCache::del(\\$admin_user_id, \\$menu_url);",
      "exception('你的操作过于频繁', 429);",
      "} else {",
      "AdminThrottleCache::inc(\\$admin_user_id, \\$menu_url);",
      "}",
      "} else {",
      "AdminThrottleCache::set(\\$admin_user_id, \\$menu_url, \\$expire);",
      "}",
      "}",
      "}",
      "",
      "return $next(\\$request);"
    ],
    "description": "php模板" // 模板的描述
  },
  "Admin Token验证中间件": {
    "prefix": "mi",
    "body": [
      "\\$menu_url       = request_pathinfo();",
      "\\$api_white_list = Config::get('admin.api_white_list');",
      "if (!in_array(\\$menu_url, \\$api_white_list)) {",
      "\\$admin_token = admin_token();",
      "if (empty(\\$admin_token)) {",
      "exception('Requests Headers：AdminToken must');",
      "}",
      "",
      "\\$admin_user_id = admin_user_id();",
      "",
      "if (empty(\\$admin_user_id)) {",
      "exception('Requests Headers：AdminUserId must');",
      "}",
      "",
      "AdminTokenService::verify(\\$admin_token, \\$admin_user_id);",
      "}",
      "",
      "return \\$next(\\$request);"
    ],
    "description": "php模板" // 模板的描述
  },
  "跨域请求中间件": {
    "prefix": "mi",
    "body": [
      "header('Access-Control-Allow-Origin: *');",
      "header('Access-Control-Allow-Headers: *');",
      "header('Content-type:application/json; charset=UTF-8');",
      "header('Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE, HEAD');",
      "",
      "if (\\$request->isOptions()) {",
      "\treturn Response::create();",
      "}",
      "",
      "return \\$next(\\$request);"
    ],
    "description": "php模板" // 模板的描述
  },
  "验证器模板": {
    "prefix": "va",
    "body": [
      "// 验证规则",
      "protected \\$rule = [",
      "  'member_id'    => ['require', 'checkMember'],",
      "  'username'     => ['require', 'alphaDash', 'checkUsername', 'length' => '2,32'],",
      "  'nickname'     => ['checkNickname', 'length' => '1,32'],",
      "  'password'     => ['require', 'alphaNum', 'length' => '6,18'],",
      "  'password_old' => ['require', 'checkPwdOld'],",
      "  'password_new' => ['require', 'alphaNum', 'length' => '6,18'],",
      "  'phone'        => ['mobile', 'checkPhone'],",
      "  'email'        => ['email', 'checkEmail'],",
      "  'avatar'       => ['require', 'file', 'image', 'fileExt' => 'jpg,png', 'fileSize' => '102400'],",
      "];",
      "",
      "// 错误信息",
      "protected \\$message = [",
      "    'member_id.require'     => '缺少参数：会员id',",
      "    'username.require'      => '请输入账号',",
      "    'username.length'       => '账号长度为2至32个字符',",
      "    'username.alphaDash'    => '账号由字母、数字、下划线、破折号组成',",
      "    'nickname.require'      => '请输入昵称',",
      "    'nickname.length'       => '昵称长度为1至32个字符',",
      "    'password.require'      => '请输入密码',",
      "    'password.length'       => '密码长度为6至18个字符',",
      "    'password.alphaNum'     => '密码只能为数字和字母',",
      "    'password_old.require'  => '请输入旧密码',",
      "    'password_new.require'  => '请输入新密码',",
      "    'password_new.length'   => '新密码长度为6至18个字符',",
      "    'password_new.alphaNum' => '新密码只能为数字和字母',",
      "    'phone.mobile'          => '请输入正确的手机号码',",
      "    'email.email'           => '请输入正确的邮箱地址',",
      "    'avatar.require'        => '请选择图片',",
      "    'avatar.file'           => '请选择图片文件',",
      "    'avatar.image'          => '请选择图片格式文件',",
      "    'avatar.fileExt'        => '请选择jpg、png格式图片',",
      "    'avatar.fileSize'       => '请选择大小小于100kb图片',",
      "];",
      "",
      "// 验证场景",
      "protected \\$scene = [",
      "    'member_id'       => ['member_id'],",
      "    'member_add'      => ['username', 'nickname', 'password', 'phone', 'email'],",
      "    'member_edit'     => ['member_id', 'username', 'nickname', 'phone', 'email'],",
      "    'member_dele'     => ['member_id'],",
      "    'member_password' => ['member_id', 'password'],",
      "    'member_pwdedit'  => ['member_id', 'password_old', 'password_new'],",
      "    'member_disable'  => ['member_id'],",
      "    'member_avatar'   => ['member_id', 'avatar'],",
      "    'member_register' => ['username', 'nickname', 'password', 'phone', 'email'],",
      "    'member_login'    => ['username', 'password'],",
      "];",
      "",
      "// 验证场景定义：登录",
      "protected function scenemember_login()",
      "{",
      "    return \\$this->only(['username', 'password'])",
      "        ->remove('username', ['length', 'alphaNum', 'checkUsername'])",
      "        ->remove('password', ['length', 'alphaNum']);",
      "}",
      "",
      "// 自定义验证规则：会员是否存在",
      "protected function checkMember(\\$value, \\$rule, \\$data = [])",
      "{",
      "    \\$member_id = \\$value;",
      "",
      "    \\$member = MemberService::info(\\$member_id);",
      "",
      "    if (\\$member['is_delete'] == 1) {",
      "        return '会员已被删除：' . \\$member_id;",
      "    }",
      "",
      "    return true;",
      "}",
      "",
      "// 自定义验证规则：账号是否已存在",
      "protected function checkUsername(\\$value, \\$rule, \\$data = [])",
      "{",
      "    \\$member_id = isset(\\$data['member_id']) ? \\$data['member_id'] : '';",
      "    \\$username  = \\$data['username'];",
      "",
      "    if (\\$member_id) {",
      "        \\$where[] = ['member_id', '<>', \\$member_id];",
      "    }",
      "    \\$where[] = ['username', '=', \\$username];",
      "    \\$where[] = ['is_delete', '=', 0];",
      "",
      "    \\$member = Db::name('member')",
      "        ->field('member_id')",
      "        ->where(\\$where)",
      "        ->find();",
      "",
      "    if (\\$member) {",
      "        return '账号已存在：' . \\$username;",
      "    }",
      "",
      "    return true;",
      "}",
      "",
      "// 自定义验证规则：昵称是否已存在",
      "protected function checkNickname(\\$value, \\$rule, \\$data = [])",
      "{",
      "    \\$member_id = isset(\\$data['member_id']) ? \\$data['member_id'] : '';",
      "    \\$nickname  = \\$data['nickname'];",
      "",
      "    if (\\$member_id) {",
      "        \\$where[] = ['member_id', '<>', \\$member_id];",
      "    }",
      "    \\$where[] = ['nickname', '=', \\$nickname];",
      "    \\$where[] = ['is_delete', '=', 0];",
      "",
      "    \\$member = Db::name('member')",
      "        ->field('member_id')",
      "        ->where(\\$where)",
      "        ->find();",
      "",
      "    if (\\$member) {",
      "        return '昵称已存在：' . \\$nickname;",
      "    }",
      "",
      "    return true;",
      "}",
      "",
      "// 自定义验证规则：手机是否已存在",
      "protected function checkPhone(\\$value, \\$rule, \\$data = [])",
      "{",
      "    \\$member_id = isset(\\$data['member_id']) ? \\$data['member_id'] : '';",
      "    \\$phone     = \\$data['phone'];",
      "",
      "    if (\\$member_id) {",
      "        \\$where[] = ['member_id', '<>', \\$member_id];",
      "    }",
      "    \\$where[] = ['phone', '=', \\$phone];",
      "    \\$where[] = ['is_delete', '=', 0];",
      "",
      "    \\$member = Db::name('member')",
      "        ->field('member_id')",
      "        ->where(\\$where)",
      "        ->find();",
      "",
      "    if (\\$member) {",
      "        return '手机已存在：' . \\$phone;",
      "    }",
      "",
      "    return true;",
      "}",
      "",
      "// 自定义验证规则：邮箱是否已存在",
      "protected function checkEmail(\\$value, \\$rule, \\$data = [])",
      "{",
      "    \\$member_id = isset(\\$data['member_id']) ? \\$data['member_id'] : '';",
      "    \\$email     = \\$data['email'];",
      "",
      "    if (\\$member_id) {",
      "        \\$where[] = ['member_id', '<>', \\$member_id];",
      "    }",
      "    \\$where[] = ['email', '=', \\$email];",
      "    \\$where[] = ['is_delete', '=', 0];",

      "    \\$member = Db::name('member')",
      "        ->field('member_id')",
      "        ->where(\\$where)",
      "        ->find();",
      "",
      "    if (\\$member) {",
      "        return '邮箱已存在：' . \\$email;",
      "    }",
      "",
      "    return true;",
      "}",
      "",
      "// 自定义验证规则：旧密码是否正确",
      "protected function checkPwdOld(\\$value, \\$rule, \\$data = [])",
      "{",
      "    \\$member_id    = member_id();",
      "    \\$member       = MemberService::info(\\$member_id);",
      "    \\$password     = \\$member['password'];",
      "    \\$password_old = md5(\\$data['password_old']);",
      "",
      "    if (\\$password != \\$password_old) {",
      "        return '旧密码错误';",
      "    }",
      "",
      "    return true;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "函数模板": {
    "prefix": "fu",
    "body": ["function $1($2)", "{", "\t$3", "}"],
    "description": "php模板" // 模板的描述
  },
  "成功返回": {
    "prefix": "fu",
    "body": [
      "/**",
      " * 成功返回",
      " *",
      " * @param array   \\$data 成功数据",
      " * @param string  \\$msg  成功提示",
      " * @param integer \\$code 成功码",
      " * ",
      " * @return json",
      " */",
      " function success(\\$data = [], \\$msg = '操作成功', \\$code = 200)",
      " {",
      "\t\t\\$res['code'] = \\$code;",
      "\t\t\\$res['msg']  = \\$msg;",
      "\t\t\\$res['data'] = \\$data;",
      "",
      "\t\treturn json(\\$res);",
      " }"
    ],
    "description": "php模板" // 模板的描述
  },
  "失败返回": {
    "prefix": "fu",
    "body": [
      "/**",
      "* 错误返回",
      "*",
      "* @param string  \\$msg  错误提示",
      "* @param array   \\$err  错误数据",
      "* @param integer \\$code 错误码",
      "*",
      "* @return json",
      "*/",
      "function error(\\$msg = '操作失败', \\$err = [], \\$code = 400)",
      "{",
      "\t\\$res['code'] = \\$code;",
      "\t\\$res['msg']  = \\$msg;",
      "\t\\$res['err']  = \\$err;",
      "",
      "\tprint_r(json_encode(\\$res, JSON_UNESCAPED_UNICODE));",
      "\t",
      "\texit;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "抛出异常": {
    "prefix": "fu",
    "body": [
      "/**",
      "* 抛出异常",
      "*",
      "* @param string  \\$msg  异常提示",
      "* @param integer \\$code 错误码",
      "*",
      "* @return json",
      "*/",
      "function exception(\\$msg = '操作失败', \\$code = 400)",
      "{",
      "\tthrow new \\think\\Exception(\\$msg, \\$code);",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "服务器地址 协议和域名": {
    "prefix": "fu",
    "body": [
      "/**",
      "* 服务器地址",
      "* 协议和域名",
      "*",
      "* @return string",
      "*/",
      "function server_url()",
      "{",
      "\tif (isset(\\$_SERVER['HTTPS']) && ('1' == \\$_SERVER['HTTPS'] || 'on' == strtolower(\\$_SERVER['HTTPS']))) {",
      "\t\t\\$http = 'https://';",
      "\t} elseif (isset(\\$_SERVER['SERVER_PORT']) && ('443' == \\$_SERVER['SERVER_PORT'])) {",
      "\t\t\\$http = 'https://';",
      "\t} else {",
      "\t\t\\$http = 'http://';",
      "\t}",
      "\t",
      "\t\\$host = \\$_SERVER['HTTP_HOST'];",
      "\t\\$res  = \\$http . \\$host;",
      "\t",
      "\treturn \\$res;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "文件地址 协议，域名，文件路径": {
    "prefix": "fu",
    "body": [
      "/**",
      "* 文件地址",
      "* 协议，域名，文件路径",
      "*",
      "* @param string \\$file_path 文件路径",
      "*",
      "* @return string",
      "*/",
      "function file_url(\\$file_path = '')",
      "{",
      "if (empty(\\$file_path)) {",
      "\treturn '';",
      "}",
      "",
      "if (strpos(\\$file_path, 'http') !== false) {",
      "\treturn \\$file_path;",
      "}",
      "",
      "\\$server_url = server_url();",
      "",
      "if (stripos(\\$file_path, '/') === 0) {",
      "\t\\$res = \\$server_url . \\$file_path;",
      "} else {",
      "\t\\$res = \\$server_url . '/' . \\$file_path;",
      "}",
      "",
      "return \\$res;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "获取请求pathinfo 应用/控制器/操作": {
    "prefix": "fu",
    "body": [
      "/**",
      "* 获取请求pathinfo",
      "* 应用/控制器/操作",
      "* eg：admin/Index/index",
      "*",
      "* @return string",
      "*/",
      "function request_pathinfo()",
      "{",
      "\t\\$request_pathinfo = app('http')->getName() . '/' . Request::pathinfo();",
      "\t",
      "\treturn \\$request_pathinfo;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "http get 请求": {
    "prefix": "fu",
    "body": [
      "/**",
      "* http get 请求",
      "*",
      "* @param string \\$url    请求地址",
      "* @param array  \\$header 请求头部",
      "*",
      "* @return array",
      "*/",
      "function http_get(\\$url, \\$header = [])",
      "{",
      "\tif (empty(\\$header)) {",
      "\t\t\\$header = [",
      "\t\t\t\"Content-type:application/json;\",",
      "\t\t\t\"Accept:application/json\"",
      "\t];",
      "\t}",
      "",
      "\t\\$curl = curl_init();",
      "\tcurl_setopt(\\$curl, CURLOPT_URL, \\$url);",
      "\tcurl_setopt(\\$curl, CURLOPT_SSL_VERIFYPEER, FALSE);",
      "\tcurl_setopt(\\$curl, CURLOPT_SSL_VERIFYHOST, FALSE);",
      "\tcurl_setopt(\\$curl, CURLOPT_RETURNTRANSFER, 1);",
      "\tcurl_setopt(\\$curl, CURLOPT_HTTPHEADER, \\$header);",
      "\t\\$response = curl_exec(\\$curl);",
      "\tcurl_close(\\$curl);",
      "\t\\$response = json_decode(\\$response, true);",
      "\t",
      "\treturn \\$response;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  },
  "http post 请求": {
    "prefix": "fu",
    "body": [
      "/**",
      "* http post 请求",
      "*",
      "* @param string \\$url    请求地址",
      "* @param array  \\$param  请求参数",
      "* @param array  \\$header 请求头部",
      "*",
      "* @return array",
      "*/",
      "function http_post(\\$url, \\$param = [], \\$header = [])",
      "{",
      "\t\\$param  = json_encode(\\$param);",
      "\t",
      "\tif (empty(\\$param)) {",
      "\t\t\\$header = [",
      "\t\t\t\"Content-type:application/json;charset='utf-8'\",",
      "\t\t\t\"Accept:application/json\"",
      "\t\t];",
      "\t}",
      "\t",
      "\t\\$curl = curl_init();",
      "\tcurl_setopt(\\$curl, CURLOPT_URL, \\$url);",
      "\tcurl_setopt(\\$curl, CURLOPT_SSL_VERIFYPEER, FALSE);",
      "\tcurl_setopt(\\$curl, CURLOPT_SSL_VERIFYHOST, FALSE);",
      "\tcurl_setopt(\\$curl, CURLOPT_POST, 1);",
      "\tcurl_setopt(\\$curl, CURLOPT_POSTFIELDS, \\$param);",
      "\tcurl_setopt(\\$curl, CURLOPT_HTTPHEADER, \\$header);",
      "\tcurl_setopt(\\$curl, CURLOPT_RETURNTRANSFER, 1);",
      "\t\\$response = curl_exec(\\$curl);",
      "\tcurl_close(\\$curl);",
      "\t\\$response = json_decode(\\$response, true);",
      "\t",
      "\treturn \\$response;",
      "}"
    ],
    "description": "php模板" // 模板的描述
  }
}
